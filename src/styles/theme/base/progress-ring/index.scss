.fv-progress-ring {
    display: inline-block;
    pointer-events: none;
    --fv-progress-ring-size: 60px;
    --fv-progress-ring-border-width: 5px;
    --fv-progress-ring-offset: -0.01;
    --fv-progress-ring-length: 0;
    --fv-progress-ring-value: 0;
    --fv-progress-ring-perimeter: calc(
        3.14 * (var(--fv-progress-ring-size) - 2 * var(--fv-progress-ring-border-width))
    );
    .label {
        .progress {
            display: none;
        }
        .svg {
            width: calc(var(--fv-progress-ring-size));
            height: calc(var(--fv-progress-ring-size));
            background: transparent;
            .bar {
                stroke-width: var(--fv-progress-ring-border-width);
                fill: none;
                stroke-dashoffset: calc(0px - var(--fv-progress-ring-offset) * var(--fv-progress-ring-perimeter));
                stroke-dasharray: calc(var(--fv-progress-ring-length) * var(--fv-progress-ring-perimeter)),
                    calc(var(--fv-progress-ring-perimeter) * 2);
                transform-origin: center;
                transform: rotate(-90deg);
                stroke-linecap: round;
            }
        }
    }
    &.determinate {
        .label {
            .svg {
                .bar {
                    transition: stroke-dasharray 0.3s linear;
                    stroke-dasharray: calc(var(--fv-progress-ring-value) * var(--fv-progress-ring-perimeter)),
                        calc(var(--fv-progress-ring-perimeter) * 2);
                }
            }
        }
    }
    &.indeterminate {
        &.running {
            .label {
                .svg {
                    .bar {
                        animation-name: fv-progress-ring-indeterminate;
                        animation-duration: 2s;
                        animation-iteration-count: infinite;
                        animation-timing-function: linear;
                        animation-play-state: initial;
                    }
                }
            }
        }
        &.pause {
            .svg {
                .bar {
                    animation-name: fv-progress-ring-indeterminate-pause;
                    animation-duration: 1s;
                    animation-iteration-count: 1;
                    animation-timing-function: linear;
                    animation-play-state: initial;
                    stroke-dasharray: var(--fv-progress-ring-perimeter), calc(var(--fv-progress-ring-perimeter) * 2);
                }
            }
        }
        &.error {
            .svg {
                .bar {
                    animation-name: fv-progress-ring-indeterminate-error;
                    animation-duration: 1s;
                    animation-iteration-count: 1;
                    animation-timing-function: linear;
                    animation-play-state: initial;
                    stroke-dasharray: var(--fv-progress-ring-perimeter), calc(var(--fv-progress-ring-perimeter) * 2);
                }
            }
        }
    }
}

@keyframes fv-progress-ring-indeterminate-error {
    from {
        stroke-dasharray: calc(0 * var(--fv-progress-ring-perimeter)), calc(var(--fv-progress-ring-perimeter) * 2);
    }
    to {
        stroke-dasharray: calc(1 * var(--fv-progress-ring-perimeter)), calc(var(--fv-progress-ring-perimeter) * 2);
    }
}

@keyframes fv-progress-ring-indeterminate-pause {
    from {
        stroke-dasharray: calc(0 * var(--fv-progress-ring-perimeter)), calc(var(--fv-progress-ring-perimeter) * 2);
    }
    to {
        stroke-dasharray: calc(1 * var(--fv-progress-ring-perimeter)), calc(var(--fv-progress-ring-perimeter) * 2);
    }
}

@keyframes fv-progress-ring-indeterminate {
    from {
        transform: rotate(-90deg);
        stroke-dasharray: calc(0 * var(--fv-progress-ring-perimeter)), calc(var(--fv-progress-ring-perimeter) * 2);
    }
    50% {
        transform: rotate(270deg);
        stroke-dasharray: calc(0.4 * var(--fv-progress-ring-perimeter)), calc(var(--fv-progress-ring-perimeter) * 2);
    }
    to{
        transform: rotate(1000deg);
        stroke-dasharray: calc(0 * var(--fv-progress-ring-perimeter)), calc(var(--fv-progress-ring-perimeter) * 2);
    }
}
